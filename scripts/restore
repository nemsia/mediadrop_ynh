#!/bin/bash

# Exit on command errors and treat unset variables as an error
set -eu

# The parameter $app is the id of the app instance ex: ynhexample__2
app=$YNH_APP_INSTANCE_NAME

# Source app helpers
source /usr/share/yunohost/helpers

# Get old parameter of the app
domain=$(ynh_app_setting_get $app domain)
path=$(ynh_app_setting_get $app path)
is_public=$(ynh_app_setting_get $app is_public)
# with_mysql=$(ynh_app_setting_get "$app" with_mysql)

# Check domain/path availability
sudo yunohost app checkurl "${domain}${path}" -a "$app" \
    || ynh_die "Path not available: ${domain}${path}"

# Check $final_path
final_path="/var/www/${app}"
if [ -d $final_path ]; then
	ynh_die "There is already a directory: $final_path"
fi

# Check configuration files nginx
nginx_conf="/etc/nginx/conf.d/${domain}.d/${app}.conf"
if [ -f $nginx_conf ]; then
	ynh_die "The NGINX configuration already exists at '${nginx_conf}'. You should safely delete it before restoring this app."
fi

# Restore services
mediadrop_systemd="/etc/systemd/system/${app}.service"
if [ -f "${mediadrop_systemd}" ]; then
	ynh_die "The MEDIADROP configuration already exists at '${mediadrop_systemd}'. 
	You should safely delete it before restoring this app."
fi
mediadrop_uwsgi_systemd="/etc/systemd/system/${app}.uwsgi.service"
if [ -f "${mediadrop_uwsgi_systemd}" ]; then
	ynh_die "The MEDIADROP UWSGI configuration already exists at '${mediadrop_uwsgi_systemd}'. 
	You should safely delete it before restoring this app."
fi

# Create user
sudo useradd -N $app -d /opt/$app/

 # Restore sources & data
sudo cp -a ./sources "$final_path"

# Set permissions
sudo chown -R $app: "$final_path"

# Restore db
# if [[ $with_mysql -eq 1 ]]; then
db_pwd=$(ynh_app_setting_get $app mysqlpwd)
db_user=$app
ynh_mysql_create_db $db_user $db_user $db_pwd
sudo su -c "mysql -u $db_user -p$db_pwd $app < ./db.sql"
# fi

# Restore nginx configuration files
sudo cp -a ./nginx.conf   "$nginx_conf"

# Restore services
sudo cp ../conf/mediadrop.service /etc/systemd/system/mediadrop.service
sudo chown root: /etc/systemd/system/mediadrop.service
sudo cp ../conf/mediadrop.uwsgi.service /etc/systemd/system/mediadrop.uwsgi.service
sudo chown root: /etc/systemd/system/mediadrop.uwsgi.service

# Enable & start services
sudo systemctl daemon-reload
sudo systemctl enable /etc/systemd/system/mediadrop.service
sudo systemctl enable /etc/systemd/system/mediadrop.uwsgi.service
sudo systemctl start mediadrop.service
sudo systemctl start mediadrop.uwsgi.service

# Add service YunoHost
sudo yunohost service add mediadrop
sudo yunohost service add mediadrop.uwsgi

# Reload services
sudo systemctl reload nginx